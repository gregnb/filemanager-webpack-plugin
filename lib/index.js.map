{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const cpx = require(\"cpx\");\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst fsExtra = require(\"fs-extra\");\r\nconst rimraf = require(\"rimraf\");\r\nconst mv = require(\"mv\");\r\nconst makeDir = require(\"make-dir\");\r\n\r\nclass FileManagerPlugin {\r\n  constructor(options) {\r\n    this.options = this.setOptions(options);\r\n    this.isWin = /^win/.test(process.platform);\r\n\r\n    /* cpx options */\r\n    this.cpxOptions = {\r\n      clean: false,\r\n      includeEmptyDirs: true,\r\n      update: false,\r\n    };\r\n  }\r\n\r\n  setOptions(userOptions) {\r\n    const defaultOptions = {\r\n      verbose: false,\r\n      moveWithMkdirp: false,\r\n      onStart: {},\r\n      onEnd: {},\r\n    };\r\n\r\n    for (const key in defaultOptions) {\r\n      if (userOptions.hasOwnProperty(key)) {\r\n        defaultOptions[key] = userOptions[key];\r\n      }\r\n    }\r\n\r\n    return defaultOptions;\r\n  }\r\n\r\n  checkOptions(stage) {\r\n    if (this.options.verbose && Object.keys(this.options[stage]).length) {\r\n      console.log(`FileManagerPlugin: processing ${stage} event`);\r\n    }\r\n\r\n    let operationList = [];\r\n\r\n    if (this.options[stage] && Array.isArray(this.options[stage])) {\r\n      this.options[stage].map(opts => operationList.push(...this.parseFileOptions(opts, true)));\r\n    } else {\r\n      operationList.push(...this.parseFileOptions(this.options[stage]));\r\n    }\r\n\r\n    if (operationList.length) {\r\n      operationList.reduce((previous, fn) => {\r\n        return previous.then(retVal => fn(retVal));\r\n      }, Promise.resolve());\r\n    }\r\n  }\r\n\r\n  copyDirectory(source, destination, resolve, reject) {\r\n    if (this.options.verbose) {\r\n      console.log(`  - FileManagerPlugin: Start copy source file: ${source} to destination file: ${destination}`);\r\n    }\r\n\r\n    cpx.copy(source, destination, this.cpxOptions, err => {\r\n      if (err && this.options.verbose) {\r\n        console.log(\"  - FileManagerPlugin: Error - copy failed\", err);\r\n        reject(err);\r\n      }\r\n\r\n      if (this.options.verbose) {\r\n        console.log(`  - FileManagerPlugin: Finished copy source: ${source} to destination: ${destination}`);\r\n      }\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  replaceHash(filename) {\r\n    return filename.replace(\"[hash]\", this.fileHash);\r\n  }\r\n\r\n  parseFileOptions(options, preserveOrder = false) {\r\n    const optKeys = Object.keys(options);\r\n\r\n    let commandOrder = [];\r\n\r\n    for (let i = 0; i < optKeys.length; i++) {\r\n      const fileAction = optKeys[i];\r\n      const fileOptions = options[fileAction];\r\n\r\n      switch (fileAction) {\r\n        case \"copy\":\r\n          for (let key in fileOptions) {\r\n            const command = {\r\n              source: this.replaceHash(fileOptions[key].source),\r\n              destination: this.replaceHash(fileOptions[key].destination),\r\n            };\r\n\r\n            if (!command.source || !command.destination) {\r\n              if (this.options.verbose) {\r\n                console.log(\r\n                  \"  - FileManagerPlugin: Warning - copy parameter has to be formated as follows: { source: <string>, destination: <string> }\",\r\n                );\r\n              }\r\n              return;\r\n            }\r\n\r\n            commandOrder.push(\r\n              () =>\r\n                new Promise((resolve, reject) => {\r\n                  // if source is a file, just copyFile()\r\n                  // if source is a NOT a glob pattern, simply append **/*\r\n                  const fileRegex = /(\\*|\\{+|\\}+)/g;\r\n                  const matches = fileRegex.exec(command.source);\r\n\r\n                  if (matches === null) {\r\n                    fs.lstat(command.source, (sErr, sStats) => {\r\n                      fs.lstat(command.destination, (dErr, dStats) => {\r\n                        if (sStats.isFile()) {\r\n                          const destination =\r\n                            dStats && dStats.isDirectory()\r\n                              ? command.destination + \"/\" + path.basename(command.source)\r\n                              : command.destination;\r\n\r\n                          if (this.options.verbose) {\r\n                            console.log(\r\n                              `  - FileManagerPlugin: Start copy source: ${\r\n                              command.source\r\n                              } to destination: ${destination}`,\r\n                            );\r\n                          }\r\n\r\n                          /*\r\n                           * If the supplied destination is a directory copy inside.\r\n                           * If the supplied destination is a directory that does not exist yet create it & copy inside                      \r\n                           */\r\n\r\n                          const pathInfo = path.parse(destination);\r\n\r\n                          const execCopy = (src, dest) => {\r\n                            fsExtra.copy(src, dest, err => {\r\n                              if (err) reject(err);\r\n                              resolve();\r\n                            });\r\n                          };\r\n\r\n                          if (pathInfo.ext === \"\") {\r\n                            makeDir(destination).then(mPath => {\r\n                              execCopy(command.source, destination + \"/\" + path.basename(command.source));\r\n                            });\r\n                          } else {\r\n                            execCopy(command.source, destination);\r\n                          }\r\n                        } else {\r\n                          const sourceDir = command.source + (command.source.substr(-1) !== \"/\" ? \"/\" : \"\") + \"**/*\";\r\n                          this.copyDirectory(sourceDir, command.destination, resolve, reject);\r\n                        }\r\n                      });\r\n                    });\r\n                  } else {\r\n                    this.copyDirectory(command.source, command.destination, resolve, reject);\r\n                  }\r\n                }),\r\n            );\r\n          }\r\n\r\n          break;\r\n\r\n        case \"move\":\r\n          for (let key in fileOptions) {\r\n            const command = {\r\n              source: this.replaceHash(fileOptions[key].source),\r\n              destination: this.replaceHash(fileOptions[key].destination),\r\n            };\r\n\r\n            if (!command.source || !command.destination) {\r\n              if (this.options.verbose) {\r\n                console.log(\r\n                  \"  - FileManagerPlugin: Warning - move parameter has to be formated as follows: { source: <string>, destination: <string> }\",\r\n                );\r\n              }\r\n              return;\r\n            }\r\n\r\n            commandOrder.push(\r\n              () =>\r\n                new Promise((resolve, reject) => {\r\n                  if (this.options.verbose) {\r\n                    console.log(\r\n                      `  - FileManagerPlugin: Start move source: ${command.source} to destination: ${\r\n                      command.destination\r\n                      }`,\r\n                    );\r\n                  }\r\n\r\n                  mv(command.source, command.destination, { mkdirp: this.options.moveWithMkdirp }, err => {\r\n                    if (err) {\r\n                      if (this.options.verbose) {\r\n                        console.log(\"  - FileManagerPlugin: Error - move failed\", err);\r\n                      }\r\n                      reject(err);\r\n                    }\r\n\r\n                    if (this.options.verbose) {\r\n                      console.log(\r\n                        `  - FileManagerPlugin: Finished move source: ${command.source} to destination: ${\r\n                        command.destination\r\n                        }`,\r\n                      );\r\n                    }\r\n\r\n                    resolve();\r\n                  });\r\n                }),\r\n            );\r\n          }\r\n\r\n          break;\r\n\r\n        case \"delete\":\r\n          if (!Array.isArray(fileOptions)) {\r\n            throw Error(`  - FileManagerPlugin: Fail - delete parameters has to be type of 'strings array' but was '${typeof fileOptions}'. Process canceled.`);\r\n          }\r\n\r\n          for (let key in fileOptions) {\r\n            const path = this.replaceHash(fileOptions[key]);\r\n\r\n            commandOrder.push(\r\n              () =>\r\n                new Promise((resolve, reject) => {\r\n                  if (this.options.verbose) {\r\n                    console.log(`  - FileManagerPlugin: Starting delete path ${path}`);\r\n                  }\r\n\r\n                  if (typeof path !== \"string\") {\r\n                    if (this.options.verbose) {\r\n                      console.log(\r\n                        \"  - FileManagerPlugin: Warning - delete parameter has to be type of string. Process canceled.\",\r\n                      );\r\n                    }\r\n                    reject();\r\n                  }\r\n\r\n                  rimraf(path, {}, response => {\r\n                    if (this.options.verbose && response === null) {\r\n                      console.log(`  - FileManagerPlugin: Finished delete path ${path}`);\r\n                    }\r\n                    resolve();\r\n                  });\r\n                }),\r\n            );\r\n          }\r\n\r\n          break;\r\n\r\n        case \"mkdir\":\r\n          for (let key in fileOptions) {\r\n            const path = this.replaceHash(fileOptions[key]);\r\n\r\n            if (this.options.verbose) {\r\n              console.log(`  - FileManagerPlugin: Creating path ${path}`);\r\n            }\r\n\r\n            if (typeof path !== \"string\") {\r\n              if (this.options.verbose) {\r\n                console.log(\r\n                  \"  - FileManagerPlugin: Warning - mkdir parameter has to be type of string. Process canceled.\",\r\n                );\r\n              }\r\n              return;\r\n            }\r\n\r\n            commandOrder.push(() => makeDir(path));\r\n          }\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return commandOrder;\r\n  }\r\n\r\n  apply(compiler) {\r\n    compiler.plugin(\"compilation\", (compliation) => {\r\n      try {\r\n        this.checkOptions(\"onStart\");\r\n      } catch (error) {\r\n        compliation.errors.push(error);\r\n      }\r\n    });\r\n\r\n    compiler.plugin(\"after-emit\", (compliation, callback) => {\r\n      this.fileHash = compliation.hash;\r\n      try {\r\n        this.checkOptions(\"onEnd\");\r\n      } catch (error) {\r\n        compliation.errors.push(error);\r\n      }\r\n      callback();\r\n    });\r\n  }\r\n}\r\n\r\nexport default FileManagerPlugin;\r\n"],"names":["cpx","require","fs","path","fsExtra","rimraf","mv","makeDir","FileManagerPlugin","options","setOptions","isWin","test","process","platform","cpxOptions","userOptions","defaultOptions","key","hasOwnProperty","stage","verbose","Object","keys","length","log","operationList","Array","isArray","map","push","parseFileOptions","opts","reduce","previous","fn","then","retVal","Promise","resolve","source","destination","reject","copy","err","filename","replace","fileHash","optKeys","commandOrder","i","fileAction","fileOptions","command","replaceHash","fileRegex","matches","exec","lstat","sErr","sStats","dErr","dStats","isFile","isDirectory","basename","pathInfo","parse","execCopy","src","dest","ext","sourceDir","substr","copyDirectory","mkdirp","moveWithMkdirp","Error","response","compiler","plugin","compliation","checkOptions","error","errors","callback","hash"],"mappings":"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"}